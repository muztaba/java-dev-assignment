/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package socket.server;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import socket.io.RequestObject;
import socket.io.RequestObjectJsonMapper;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import static socket.utils.TestUtils.createRequestObject;

class AppTest {
    InetAddress host;
    private static final int PORT = 9876;

    @BeforeEach
    void initialize() throws IOException {
        Runnable runnable = () -> {
            try {
                new App().startServerAndAcceptRequest();
            } catch (IOException | ClassNotFoundException e) {
                e.printStackTrace();
            }
        };
        Thread serverThread = new Thread(runnable);
        serverThread.start();
        host = InetAddress.getLocalHost();
    }

    @Test
    void sendRequest() throws IOException, ClassNotFoundException, InterruptedException {
        for (int i = 0; i < 5; i++) {
            // opening new socket for every request here. we can also send multiple requests with one socket.
            Socket socket = new Socket(host.getHostName(), PORT);
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(socket.getOutputStream());
            objectOutputStream.writeObject(RequestObjectJsonMapper.writeAsString(createRequestObject()));
            ObjectInputStream objectInputStream = new ObjectInputStream(socket.getInputStream());
            String message = (String) objectInputStream.readObject();
            System.out.println("Message from server: " + message);
            objectOutputStream.close();
            objectInputStream.close();
            socket.close();
            Thread.sleep(100);
        }
    }

    @Test
    void singleSocketMultipleRequest() throws IOException, ClassNotFoundException, InterruptedException {
        Socket socket = new Socket(host.getHostName(), PORT);
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(socket.getOutputStream());

        RequestObject requestObject = createRequestObject();
        requestObject.getArgs().put("n", "100000");
        System.out.println("first arg " + requestObject.getArg("n"));
        objectOutputStream.writeObject(RequestObjectJsonMapper.writeAsString(requestObject));
        ObjectInputStream objectInputStream = new ObjectInputStream(socket.getInputStream());

        RequestObject requestObject2 = createRequestObject();
        requestObject.getArgs().put("n", "10");
        System.out.println("second arg " + requestObject2.getArg("n"));
        objectOutputStream.writeObject(RequestObjectJsonMapper.writeAsString(requestObject2));

        String message1 = (String) objectInputStream.readObject();
        String message2 = (String) objectInputStream.readObject();
        System.out.println("First message from server: " + message1);
        System.out.println("Second message from server: " + message2);

        objectOutputStream.close();
        objectInputStream.close();
        socket.close();
        Thread.sleep(100);
    }

    @Test
    void multiThreadedRequest() {
        Runnable runnable = () -> {
            try {
                Socket socket = new Socket(host.getHostName(), PORT);
                ObjectOutputStream objectOutputStream = new ObjectOutputStream(socket.getOutputStream());
                objectOutputStream.writeObject(RequestObjectJsonMapper.writeAsString(createRequestObject()));
                ObjectInputStream objectInputStream = new ObjectInputStream(socket.getInputStream());
                String message1 = (String) objectInputStream.readObject();
                System.out.println("First message from server: " + message1);
                objectOutputStream.writeObject(RequestObjectJsonMapper.writeAsString(createRequestObject()));
                String message2 = (String) objectInputStream.readObject();
                System.out.println("Second message from server: " + message2);
                objectOutputStream.close();
                objectInputStream.close();
                socket.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        };

        List<Runnable> runnables = new ArrayList<>();
        for (int i = 0; i < 10; i++) {
            runnables.add(runnable);
        }

        ExecutorService pool = Executors.newFixedThreadPool(10);

        CompletableFuture<?>[] futures = runnables.stream()
                .map(task -> CompletableFuture.runAsync(task, pool))
                .toArray(CompletableFuture[]::new);

        CompletableFuture.allOf(futures).join();
        pool.shutdown();
    }

    @AfterEach
    void cleanup() throws IOException, InterruptedException {
        Socket socket = new Socket(host.getHostName(), PORT);
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(socket.getOutputStream());
        objectOutputStream.writeObject("EXIT");
        Thread.sleep(100);
        objectOutputStream.close();
        socket.close();
    }
}
